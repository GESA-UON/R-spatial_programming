#ceiling() and floor()
#The ceiling() function rounds a number upwards to its nearest integer,
#and the floor() function rounds a number downwards to its nearest integer,
#and returns the result:
ceiling(4.3)
#ceiling() and floor()
#The ceiling() function rounds a number upwards to its nearest integer,
#and the floor() function rounds a number downwards to its nearest integer,
#and returns the result:
ceiling(4.3)
floor(4.3)
#String length
str <- "Hello World!"
nchar(str)
#Check a String
#Use the grepl() function to check if a character or a sequence of characters
#are present in a string:
grepl("H",str)
#Combine Two Strings
#Use the paste() function to merge/concatenate two strings:
number1 <- "Hello"
number2 <- "World"
paste(number1,number2)
cat("You can say: ",str)
#Escape Characters
#.	To insert characters that are illegal in a string, you must use an escape character.
#.	An escape character is a backslash \ followed by the character you want to insert.
#.	An example of an illegal character is a double quote inside a string that is surrounded
#by double quotes:
str <- "We are the so-called \"Vikings\", from the north."
str
cat(str)
#Escape Characters
#.	To insert characters that are illegal in a string, you must use an escape character.
#.	An escape character is a backslash \ followed by the character you want to insert.
#.	An example of an illegal character is a double quote inside a string that is surrounded
#by double quotes:
str <- "We are the so-called \"str\", from the north."
str
cat(str)
#.....Printing my first code......#
print("Hello World")
print("Hello World",quote = F)
#..........Using Breaks......#
i <- 0
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
dice =dice+1
if (dice<=6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
print("Hello World")
print("Hello World",quote = false)
print("Hello World",quote = F)
print("Hello World",quote = False)
print("Hello World",quote = FALSE)
#.....Printing my first code......#
print("Hello World")
#.............Variables.......#
# Legal variable names:
myvar <- "John"
my_var <- "John"
#.....Printing my first code......#
print("Hello World")
print("Hello World",quote = F)
#.............Variables.......#
# Legal variable names:
myvar <- "John"
my_var <- "John"
my_var <- "John"
myVar <- "John"
MYVAR <- "John"
myvar2 <- "John"
.myvar <- "John"
greeting <- "Hello World"
greeting
nchar(greeting)
cat("My greeting is:",greeting)
number5 <- 5
number4 <- 4
sum <- number5+number4
sum
print(paste("The sum of 5 and 4 is"sum))
print(paste("The sum of 5 and 4 is",sum))
#While loops
#With the while loop we can execute a set of statements as long as a condition is TRUE:
i <-0
while (i<6){
i = i+1
print(i)
}
#While loops
#With the while loop we can execute a set of statements as long as a condition is TRUE:
i <-1
while (i<=6){
print(i)
i = i+1
}
#..........Using Breaks......#
i <- 0
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........Next {continue in python}.........#
i <- 0
while (i <= 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
#..........Using Breaks......#
i <- 0
while (i <=6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........Using Breaks......#
i <- 1
while (i <=6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
dice =dice+1
if (dice<=6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........While and if statements........#
dice <- 1
#..........While and if statements........#
dice <- 1
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
while (dice<=6){
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
dice =dice+1
}
}
dice =dice+1
while (dice<=6){
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
dice =dice+1
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
dice =dice+1
}
#..........While and if statements........#
dice <- 1
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........While and if statements........#
dice <- 0
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........Using Breaks......#
i <- 0
while (i <6) {
i <- i + 1
print(i)
if (i == 4) {
break
}
}
penguins_raw <- read_csv("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins_raw.csv")
#install.packages("janitor")
library(janitor)
#install.packages("tidyverse")
library(tidyverse)
penguins_raw <- read_csv("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins_raw.csv")
#Taking a glimpse at the dataset
glimpse(penguins_raw)
)`
penguins_raw$`Delta 15 N (o/oo)`
penguins_raw$`Flipper Length (mm)`
#clean_names()` just magically turns all our messy column names into
#readable lower-case snake case:
penguins_clean <- clean_names(penguins_raw)
glimpse(penguins_clean)
table(penguins_clean$region)
penguins_clean <- remove_constant(penguins_clean, quiet = F)
#Another useful function in `janitor` is `remove_empty()` which removes
#all rows or columns that just consist of missing values (i.e. `NA`)
penguins_na <- remove_empty(penguins_clean,quiet = F)
#Data cleaning using tidyr
table(penguins_clean$species)
#Species hold both the *common name* and the *latin name* of the penguin.
#Using separate()
penguins_clean <- separate(penguins_clean, species, sep = " \\(", into = c("species", "latin_name"))
penguins_clean
#Data cleaning using tidyr
table(penguins_clean$species)
#Data cleaning using tidyr
table(penguins_clean$latin_name)
library(stringr)
penguins_clean$latin_name <- str_remove(penguins_clean$latin_name, ")")
penguins_clean$latin_name <- str_remove(penguins_clean$latin_name, "\\)")
#Data cleaning using tidyr
table(penguins_clean$latin_name)
#Import your data
untidy_animals <- read_csv("https://github.com/favstats/ds3_r_intro/blob/main/data/untidy_animals.csv?raw=true")
untidy_animals
tidy_animals <- pivot_wider(untidy_animals,  names_from = Type, values_from = Value)
tidy_animals
#Untidy it again
pivot_longer(tidy_animals,  cols = c(lifespan, ratio))
#--------------------------Using dplyr-----------------------------#
#Select
select(penguins_clean, individual_id, sex, species)
select(penguins_clean, -individual_id, -sex, -species)
select(penguins_clean, starts_with("s"))
#Filter()
filter(penguins_clean, island == "Dream")
ifelse(1 == 1, "Pick me if test is TRUE", "Pick me if test is FALSE")
ifelse(1 != 1, "Pick me if test is TRUE", "Pick me if test is FALSE")
#Recording with case_when
x <- c(1:50)
x
case_when(
x %in% 1:10 ~ "1 through 10",
x %in% 11:30 ~ "11 through 30",
TRUE ~ "above 30"
)
#Using it with mutate
test <- mutate(penguins_clean,
island_short = case_when(
island == "Torgersen" ~ "T",
island == "Biscoe" ~ "B",
island == "Dream" ~ "D"
))
select(test, island, island_short)
