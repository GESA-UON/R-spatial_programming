print(paste("The sum of 5 and 4 is"sum))
print(paste("The sum of 5 and 4 is",sum))
#While loops
#With the while loop we can execute a set of statements as long as a condition is TRUE:
i <-0
while (i<6){
i = i+1
print(i)
}
#While loops
#With the while loop we can execute a set of statements as long as a condition is TRUE:
i <-1
while (i<=6){
print(i)
i = i+1
}
#..........Using Breaks......#
i <- 0
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........Next {continue in python}.........#
i <- 0
while (i <= 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
#..........Using Breaks......#
i <- 0
while (i <=6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........Using Breaks......#
i <- 1
while (i <=6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
dice =dice+1
if (dice<=6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........While and if statements........#
dice <- 1
#..........While and if statements........#
dice <- 1
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
while (dice<=6){
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
dice =dice+1
}
}
dice =dice+1
while (dice<=6){
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
dice =dice+1
}
#..........While and if statements........#
dice <- 1
while (dice<=6){
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
dice =dice+1
}
#..........While and if statements........#
dice <- 1
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........While and if statements........#
dice <- 0
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
#..........Using Breaks......#
i <- 0
while (i <6) {
i <- i + 1
print(i)
if (i == 4) {
break
}
}
penguins_raw <- read_csv("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins_raw.csv")
#install.packages("janitor")
library(janitor)
#install.packages("tidyverse")
library(tidyverse)
penguins_raw <- read_csv("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins_raw.csv")
#Taking a glimpse at the dataset
glimpse(penguins_raw)
)`
penguins_raw$`Delta 15 N (o/oo)`
penguins_raw$`Flipper Length (mm)`
#clean_names()` just magically turns all our messy column names into
#readable lower-case snake case:
penguins_clean <- clean_names(penguins_raw)
glimpse(penguins_clean)
table(penguins_clean$region)
penguins_clean <- remove_constant(penguins_clean, quiet = F)
#Another useful function in `janitor` is `remove_empty()` which removes
#all rows or columns that just consist of missing values (i.e. `NA`)
penguins_na <- remove_empty(penguins_clean,quiet = F)
#Data cleaning using tidyr
table(penguins_clean$species)
#Species hold both the *common name* and the *latin name* of the penguin.
#Using separate()
penguins_clean <- separate(penguins_clean, species, sep = " \\(", into = c("species", "latin_name"))
penguins_clean
#Data cleaning using tidyr
table(penguins_clean$species)
#Data cleaning using tidyr
table(penguins_clean$latin_name)
library(stringr)
penguins_clean$latin_name <- str_remove(penguins_clean$latin_name, ")")
penguins_clean$latin_name <- str_remove(penguins_clean$latin_name, "\\)")
#Data cleaning using tidyr
table(penguins_clean$latin_name)
#Import your data
untidy_animals <- read_csv("https://github.com/favstats/ds3_r_intro/blob/main/data/untidy_animals.csv?raw=true")
untidy_animals
tidy_animals <- pivot_wider(untidy_animals,  names_from = Type, values_from = Value)
tidy_animals
#Untidy it again
pivot_longer(tidy_animals,  cols = c(lifespan, ratio))
#--------------------------Using dplyr-----------------------------#
#Select
select(penguins_clean, individual_id, sex, species)
select(penguins_clean, -individual_id, -sex, -species)
select(penguins_clean, starts_with("s"))
#Filter()
filter(penguins_clean, island == "Dream")
ifelse(1 == 1, "Pick me if test is TRUE", "Pick me if test is FALSE")
ifelse(1 != 1, "Pick me if test is TRUE", "Pick me if test is FALSE")
#Recording with case_when
x <- c(1:50)
x
case_when(
x %in% 1:10 ~ "1 through 10",
x %in% 11:30 ~ "11 through 30",
TRUE ~ "above 30"
)
#Using it with mutate
test <- mutate(penguins_clean,
island_short = case_when(
island == "Torgersen" ~ "T",
island == "Biscoe" ~ "B",
island == "Dream" ~ "D"
))
select(test, island, island_short)
2+2
2+2
print("Hello World",quote = F)
#.....Printing my first code......#
print("Hello World")
#String length
str <- "Hello World!"
#String length
str <- "Hello World!"
str
nchar(str)
#Combine Two Strings
#Use the paste() function to merge/concatenate two strings:
number1 <- "Hello"
number2 <- "World"
paste(number1,number2)
paste(number1,number2)
print("Hello World")
cat("You can say: ",str)
# Exercise: Write R program to add two numbers
numb1 <- 8
numb2 <- 4
# Adding two numbers
sum <- numb1 + numb2
cat("The sum is", sum)
ls()
rm(sum)
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print("a and b are equal")
} else {
print("a is greater than b")
}
#===========IF STATMENTS==========#
#if else statements
a <- 200
b <- 33
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print("a and b are equal")
} else {
print("a is greater than b")
}
#Nested if statments
x <- 50
if (x > 10) {
print("Above ten")
if (x > 20) {
print("and also above 20!")
} else {
print("but not above 20.")
}
} else {
print("below 10.")
}
#-----------AND-----------#
#The & symbol (and) is a logical operator, and is used to combine conditional statements:
a <- 600
b <- 33
c <- 500
if (a > b & c > a) {
print("Both conditions are true")
}else{
"The condition is not true"
}
#---------------OR----------------------#
#The | symbol (or) is a logical operator, and is used to combine conditional statements:
a <- 200
b <- 33
c <- 500
if (a > b | a > c) {
print("At least one of the conditions is true")
}
if (a > b | a > c) {
print("At least one of the conditions is true")
} else{
"Both conditions are true"
}
#While loops
#With the while loop we can execute a set of statements as long as a condition is TRUE:
i <-1
while (i<=6){
print(i)
i = i+1
}
while (i<=6){
print(i)
#i = i+1
}
#While loops
#With the while loop we can execute a set of statements as long as a condition is TRUE:
i <-1
while (i<=6){
print(i)
#i = i+1
}
while (i<=6){
print(i)
i +=1
i =+1
while (i<=6){
print(i)
i =+1
}
while (i<=6){
print(i)
i +=1
#Note: remember to increment i, or else the loop will continue forever.
val = 1
# using while loop
while (val <= 5 )
{
# statements
print(val)
val = val + 1
}
#..........Using Breaks......#
i <- 0
while (i <6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
print(i)
while (i <6) {
i <- i + 1
print(i)
if (i == 4) {
break
}
}
while (i <6) {
i <- i + 1
print(i)
if (i == 4) {
break
}
}
while (i <6) {
i <- i + 1
print(i)
if (i == 4) {
break
}
}
#..........Using Breaks......#
i <- 0
while (i <6) {
i <- i + 1
print(i)
if (i == 4) {
break
}
}
while (i <6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
while (i <6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........Using Breaks......#
i <- 0
while (i <6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
#..........Next {continue in python}.........#
i <- 0
while (i <= 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
print(i)
#..........Next {continue in python}.........#
i <- 0
while (i <= 6) {
print(i)
i <- i + 1
if (i == 3) {
next
}
}
while (i <= 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
#..........Next {continue in python}.........#
i <- 0
while (i <= 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
#Print prime numbers using while loop
p <-0
while(p<10){
p=p+1
if(p==1 | p==4 |p==6 |p==8 |p==9|p==10){
next
}
print(p)
}
#..........While and if statements........#
dice <- 0
while (dice<6){
dice =dice+1
if (dice<6){
print("No Yahtzee")
}else{
print("Yahtzee")
}
}
1:10
1"10"
1:10
1:20
#For loops
for (x in 1:10){
print(x)
}
fruits <- list("apple", "banana", "cherry")
friuts
fruits
for (x in fruits) {
print(x)
}
View(fruits)
top_ten <- 1:10
for (x in top_ten){
print(x)
}
dice <- c(1, 2, 3, 4, 5, 6)
dice
for (x in dice) {
print(x)
}
for (x in fruits) {
if (x == "cherry") {
break
}
print(x)
}
for (x in fruits) {
if (x == "banana") {
next
}
print(x)
}
#When the loop passes "banana", it will skip it and continue to loop.
#Another way to do the Yahtzee game
dice = 1:6
for (i in dice){
if (i==6){
print(paste("The dice number",i,"is Yahtzee"))
}else{
print(paste("The dice number",i,"is not Yahtzee!"))
}
}
#Nested loops
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for (i in adj){
for (j in fruits){
print(paste(i,j))
}
}
